#!/usr/bin/env python
import rospy
import sys
import os
import numpy as np
import cv2
import random
import scipy.stats.mstats as stat

import matplotlib.pyplot as plt
from bumblebee.calibration import *
from bumblebee.drawing import drawCalibrationCoverageMap,drawEpiPolarLines,plotErrorHist,drawStereoROI

import pickle
import copy
import argparse

parser =argparse.ArgumentParser()
parser.add_argument("inDir",
                    help=("The full directory to the stereo calibration output folder"),
                    type=str)
args,unknown=parser.parse_known_args()


calibrationDirectory=args.inDir
plt.style.use('seaborn')



print("Loading calibration data from "+calibrationDirectory+"/StereoCalibration.p")
calibrationData=pickle.load(open(calibrationDirectory+"/StereoCalibration.p", "rb" ))
print("file opened")
print("loading camera Information")
leftMapping = pickle.load(open(calibrationDirectory + "/left_Map.p", "rb"))
rightMapping = pickle.load(open(calibrationDirectory + "/right_Map.p", "rb"))
intrin=pickle.load(open(calibrationDirectory + "/intrinsicCalibration.p", "rb"))
extrin=pickle.load(open(calibrationDirectory + "/extrinsicCalibration.p", "rb"))
print("camera info Load")
##calculate epipolar error

leftRectified=[]
leftRectifiedFound=[]
rightRectified=[]
rightRectifiedFound=[]
leftDebayer=[]
rightDebayer=[]



##list of list of found points by image, then by checkerboard position
leftFoundPoints=[]
rightFoundPoints=[]
epiError=[]
epiPolarError=0

outFolder=calibrationDirectory+"/Matches"

if(not os.path.isdir(outFolder)):
        os.makedirs(outFolder)

print("Rectifying Images")
totalImagesFound=0
for fileName in calibrationData.inCalibrationData.imgName:
    ##get images
    fullImage=cv2.imread(calibrationData.inCalibrationData.meta.inDirectory+"/"+fileName,cv2.IMREAD_GRAYSCALE)
    if(calibrationData.inCalibrationData.meta.debayer):
        fullImage=cv2.cvtColor(fullImage,cv2.COLOR_BAYER_BG2GRAY)
    leftImage = fullImage[fullImage.shape[0] / 2:fullImage.shape[0], 0:fullImage.shape[1]]
    leftDebayer.append(leftImage)
    rightImage = fullImage[0:fullImage.shape[0] / 2, 0:fullImage.shape[1]]
    rightDebayer.append(rightImage)
    ##rectify them
    leftRectified.append(leftMapping.getRectifiedImage(leftImage))
    rightRectified.append(rightMapping.getRectifiedImage(rightImage))

    lFound, lCorners = cv2.findChessboardCorners(leftRectified[-1], calibrationData.inCalibrationData.meta.getBoardSize(),
                                                 cv2.CALIB_CB_ADAPTIVE_THRESH + cv2.CALIB_CB_NORMALIZE_IMAGE)
    rFound, rCorners = cv2.findChessboardCorners(rightRectified[-1], calibrationData.inCalibrationData.meta.getBoardSize(),
                                                 cv2.CALIB_CB_ADAPTIVE_THRESH + cv2.CALIB_CB_NORMALIZE_IMAGE)

    winSize = (7, 7)
    zeroZone = (-1, -1)
    if(lFound and rFound):
        cv2.cornerSubPix(leftRectified[-1], lCorners, winSize, zeroZone,
                         (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 1000, 0.001))
        cv2.cornerSubPix(rightRectified[-1], rCorners, winSize, zeroZone,
                         (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 1000, 0.001))
        ##draw and save images
        totalImagesFound+=1
        RMSimage = 0
        #######
        ##Draw Corners
        leftFoundPoints.append(lCorners)
        rightFoundPoints.append(rCorners)
        leftRectifiedFound.append(copy.deepcopy(cv2.cvtColor(leftRectified[-1], cv2.COLOR_GRAY2RGB)))
        rightRectifiedFound.append(copy.deepcopy(cv2.cvtColor(rightRectified[-1], cv2.COLOR_GRAY2RGB)))
        drawnLeft = copy.deepcopy(cv2.cvtColor(leftRectified[-1], cv2.COLOR_GRAY2RGB))
        drawnRight = copy.deepcopy(cv2.cvtColor(rightRectified[-1], cv2.COLOR_GRAY2RGB))
        cv2.drawChessboardCorners(drawnLeft,calibrationData.inCalibrationData.meta.getBoardSize(), lCorners, lFound)
        cv2.drawChessboardCorners(drawnRight,calibrationData.inCalibrationData.meta.getBoardSize(), rCorners, rFound)
        Combined = np.hstack((drawnLeft, drawnRight))
        for i in range(len(lCorners)):
            RMSimage+=np.power((lCorners[i]-rCorners[i])[0,1],2)
            epiPolarError+=np.power((lCorners[i]-rCorners[i])[0,1],2)
            cv2.line(Combined, (lCorners[i][0][0], lCorners[i][0][1]),
                     (int(rCorners[i][0][0] + leftRectified[-1].shape[1]), rCorners[i][0][1]), (0, 255, 0))
        RMSimage=np.sqrt(RMSimage/len(lCorners))
        epiError.append(RMSimage)
        cv2.imwrite(outFolder+"/"+fileName,Combined)
        print(outFolder+"/"+fileName)
    else:
        print("NO CHECKER")
    # outshow=copy.deepcopy(leftRectified[-1])
    # cv2.imshow("outWindow",Combined)
    # cv2.waitKey(1)

totalPoints=(totalImagesFound*
             calibrationData.inCalibrationData.meta.getBoardSize()[0]*
             calibrationData.inCalibrationData.meta.getBoardSize()[1])
print("Points in calculation: ",totalPoints)
epiPolarError= np.sqrt(epiPolarError/totalPoints)
print("Net EpiPolar Error : ",epiPolarError)
print("RMS ERROR :",calibrationData.RMS)

f2,ax2=plotErrorHist(epiError,"Average Epipolar Error")


print(intrin.lROI)
print(intrin.rROI)

overlapROI=getROIoverlap(intrin.lROI,intrin.rROI)
perc=100*(overlapROI[2]*overlapROI[3]/float(calibrationData.inCalibrationData.meta.imgSize[0]*
                                     calibrationData.inCalibrationData.meta.imgSize[1]))
print("coverage %"+ str(perc))

leftImagesAvgRms=[]
rightImagesAvgRms=[]
combined=[]

for i in range(len(calibrationData.inCalibrationData.LeftPoints)):
    leftImagesAvgRms.append(calibrationData.inCalibrationData.getSingleImageRMS(i)[0])
    rightImagesAvgRms.append(calibrationData.inCalibrationData.getSingleImageRMS(i)[1])
    combined.append((calibrationData.inCalibrationData.getSingleImageRMS(i)[0]+calibrationData.inCalibrationData.getSingleImageRMS(i)[1])/2.0)


f,ax=plotErrorHist(combined,"Average Input RMS Error",15)

f2.savefig(calibrationDirectory+"/EpiErrorFigure.png",format='png',dpi=400)
f.savefig(calibrationDirectory+"/InputErrorFigure.png",format='png',dpi=400)

leftCoverageMap=drawCalibrationCoverageMap(leftRectifiedFound,leftFoundPoints)


rightCoverageMap=drawCalibrationCoverageMap(rightRectifiedFound,rightFoundPoints)

for i in random.sample(range(0,len(rightFoundPoints)),9):
    cv2.drawChessboardCorners(rightCoverageMap,(11,8),rightFoundPoints[i],True)
    cv2.drawChessboardCorners(leftCoverageMap,(11,8),leftFoundPoints[i],True)

EpiCoverage=np.hstack((leftCoverageMap,rightCoverageMap))
drawEpiPolarLines(EpiCoverage,0.08)
EpiCoverage=drawStereoROI(EpiCoverage,intrin.lROI,intrin.rROI)
##randomSample
cv2.imwrite(calibrationDirectory+"/Coverage.png",EpiCoverage)


intrin.p()
extrin.p()
plt.show()




 
